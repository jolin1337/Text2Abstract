AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  FeatureDimension:
    Description: Instance type to launch trained production model endpoint with. 
    Type: String
    Default: 13
  TrainingInstanceType:
    Description: Instance type to launch trained production model endpoint with. 
    Type: String
    Default: ml.m4.16xlarge
  ProductionInstanceType:
    Description: Instance type to launch trained production model endpoint with. 
    Type: String
    Default: ml.m4.xlarge
  ModelPrefix: 
    Description: Prefix to prepend to resources created for the model.
    Type: String
    Default: AutoCategorization
  BucketName:
    Description: Name to create S3 bucket that will hold training data and model artifacts with. Must contain 'sagemaker' in name.
    Type: String
    Default: sagemaker-autocategorization

Resources:
  RunDailyRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: ServerlessSageMakerOrchestrationRule
      ScheduleExpression: rate(1 day)
      State: "ENABLED"
      Targets: 
        - 
          Arn: !Ref SageMakerStateMachine
          Id: "TargetFunctionV1"
          RoleArn: !GetAtt ExecuteStateMachineRole.Arn

  ExecuteStateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowCWEServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "events.amazonaws.com"
      Path: "/"
      Policies:
        -
          PolicyName: "ExecuteStateMachine"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource: "*"
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SageMakerExecutionRole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service: 
                - "sagemaker.amazonaws.com"
      Policies:
        - 
          PolicyName: SageMakerExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sagemaker:*"
                Resource: "*"
        - 
          PolicyName: SageMakerBucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}/*'
                  - !Sub 'arn:aws:s3:::${BucketName}'
        -
          PolicyName: SageMakerRepositoryPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Sid: "AllowCrossAccountPush"
                Action:
                  - "ecr:*"
                Resource: "*"
        -
          PolicyName: SageMakerCloudWatchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Sid: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  SageMakerStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |-
        {
          "StartAt": "CheckData",
          "States": {
            "CheckData": {
              "Type": "Task",
              "Resource": "${CheckDataFunction.Arn}",
              "ResultPath": "$",
              "Next": "CheckDataBranch"
            },
            "CheckDataBranch": {
              "Type": "Choice",
              "Choices": [{
                  "Variable": "$.no_new_data",
                  "BooleanEquals": true,
                  "Next": "NoNewData"
                },
                {
                  "Variable": "$.no_new_data",
                  "BooleanEquals": false,
                  "Next": "StartTrainingJob"
                }
              ]
            },
            "StartTrainingJob": {
              "Type": "Task",
              "Resource": "${StartTrainingJobFunction.Arn}",
              "ResultPath": "$",
              "Next": "DeploymentStatusBranch"
            },
            "NoNewData": {
              "Type": "Pass",
              "End": true
            },
            "CheckStatusBranch": {
              "Type": "Choice",
              "Choices": [{
                  "Or": [{
                      "Variable": "$.status",
                      "StringEquals": "Completed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "InService"
                    }
                  ],
                  "Next": "DeploymentStatusBranch"
                },
                {
                  "Or": [{
                      "Variable": "$.status",
                      "StringEquals": "InProgress"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "Creating"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "Updating"
                    }
                  ],
                  "Next": "CheckStatusWait"
                },
                {
                  "Or": [{
                      "Variable": "$.status",
                      "StringEquals": "Failed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "RollingBack"
                    }
                  ],
                  "Next": "DeploymentStatusBranch"
                }
              ]
            },
            "CheckStatusWait": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "GetStatus"
            },
            "GetStatus": {
              "Type": "Task",
              "Resource": "${GetStatusFunction.Arn}",
              "ResultPath": "$",
              "Next": "CheckStatusBranch"
            },
            "DeploymentStatusBranch": {
              "Type": "Choice",
              "Choices": [{
                  "Or": [{
                      "Variable": "$.status",
                      "StringEquals": "InProgress"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "Creating"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "Updating"
                    }
                  ],
                  "Next": "CheckStatusWait"
                },
                {
                  "And": [{
                      "Variable": "$.status",
                      "StringEquals": "Failed"
                    },
                    {
                      "Variable": "$.stage",
                      "StringEquals": "Training"
                    }
                  ],
                  "Next": "JobFailed"
                },
                {
                  "Variable": "$.status",
                  "StringEquals": "Completed",
                  "Next": "JobCompleted"
                },
                {
                  "Variable": "$.status",
                  "StringEquals": "InService",
                  "Next": "DeploymentCompleted"
                },
                {
                  "And": [{
                      "Or": [{
                          "Variable": "$.status",
                          "StringEquals": "Failed"
                        },
                        {
                          "Variable": "$.status",
                          "StringEquals": "RollingBack"
                        }
                      ]
                    },
                    {
                      "Variable": "$.stage",
                      "StringEquals": "Deployment"
                    }
                  ],
                  "Next": "DeploymentFailed"
                }
              ]
            },
            "JobCompleted": {
              "Type": "Pass",
              "Next": "DeployModel"
            },
            "JobFailed": {
              "Type": "Fail"
            },
            "DeployModel": {
              "Type": "Task",
              "Resource": "${DeployModelFunction.Arn}",
              "Next": "DeploymentStatusBranch"
            },
            "DeploymentCompleted": {
              "Type": "Pass",
              "End": true
            },
            "DeploymentFailed": {
              "Type": "Fail"
            }
          }
        }
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn

  StepFunctionExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: !Sub states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  GetStatusFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: get_status.lambda_handler
      Runtime: python3.7
      CodeUri: ../lambda_functions/
      Description: 'Checks status of SageMaker training jobs and endpoint deployment'
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sagemaker:DescribeEndpoint"
                - "sagemaker:DescribeTrainingJob"
              Resource: "*"

  DeployModelFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: deploy_model.lambda_handler
      Runtime: python3.7
      CodeUri: ../lambda_functions/
      Description: 'Deploys trained model to invokable endpoint'
      Timeout: 10
      Environment:
        Variables:
          EXECUTION_ROLE: !GetAtt SageMakerExecutionRole.Arn
          INSTANCE_TYPE: !Ref ProductionInstanceType
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sagemaker:UpdateEndpoint"
                - "sagemaker:CreateModel"
                - "sagemaker:CreateEndpointConfig"
                - "sagemaker:DescribeEndpoint"
                - "sagemaker:CreateEndpoint"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "iam:PassRole"
              Resource: !GetAtt SageMakerExecutionRole.Arn

  StartTrainingJobFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: start_training_job.lambda_handler
      Runtime: python3.7
      CodeUri: ../lambda_functions/
      Description: 'Starts model training job'
      Environment:
        Variables:
          FEATURE_DIM: !Ref FeatureDimension
          SAGEMAKER_ROLE: !GetAtt SageMakerExecutionRole.Arn
          TRAINING_INSTANCE_TYPE: !Ref TrainingInstanceType
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "sagemaker:CreateTrainingJob"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "iam:PassRole"
              Resource: !GetAtt SageMakerExecutionRole.Arn

  CheckDataFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: check_data.lambda_handler
      Runtime: python3.7
      CodeUri: ../lambda_functions/
      Description: 'Checks to see if new training data has been uploaded since last training job and adds data found in training interval to training manifest'
      Timeout: 10
      Environment:
        Variables:
          BUCKET: !Ref BucketName
          MODEL_PREFIX: !Ref ModelPrefix
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3:*"
              Resource:
                - !Sub 'arn:aws:s3:::${BucketName}/*'
                - !Sub 'arn:aws:s3:::${BucketName}'

Outputs:
  S3BucketName:
    Description: S3 bucket that will hold training data and model artifacts
    Value: !Ref BucketName

